<?php

/**
 * @file
 * Contains YourModuleName.module.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function password_reset_help($route_name, RouteMatchInterface $route_match)
{
  switch ($route_name) {
    // Main module help for the YourModuleName module.
    case 'help.page.password_reset':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Reset Password link for administrators') . '</p>';
      return $output;
    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter the user edit form.
 *
 * @param $form
 * @param FormStateInterface $form_state
 * @param $form_id
 */
function password_reset_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  // Load the current user roles.
  $user = \Drupal::currentUser()->getRoles();
  // Only show the reset link button if the user is administrator.
  if (in_array("administrator", $user)) {
    // Add the reset button to the form.
    $form['actions']['send_password_reset_link'] = [
      '#type' => 'submit',
      '#weight' => 999,
      '#limit_validation_errors' => [],
      '#button_type' => 'danger',
      '#submit' => [
        'password_reset_send_reset_link_to_account_form'
      ],
      '#value' => t('Sent reset link to account email'),
    ];
  }
}

/**
 * Submit handler for the password reset button.
 *
 * @param $form
 * @param FormStateInterface $form_state
 */
function password_reset_send_reset_link_to_account_form(&$form, FormStateInterface $form_state)
{
  // Load the user entity of the form.
  $account = $form_state->getFormObject()->getEntity();
  // Create a timestamp.
  $timestamp = \Drupal::time()->getRequestTime();
  // Set the redirect location after the user of the one time login.
  $path = '';
  // Create login link from route.
  $link = Url::fromRoute(
    'user.reset.login',
    [
      'uid' => $account->id(),
      'timestamp' => $timestamp,
      'hash' => user_pass_rehash($account, $timestamp),
    ],
    [
      'absolute' => true,
      'query' => $path ? ['destination' => $path] : [],
      'language' => \Drupal::languageManager()->getLanguage($account->getPreferredLangcode()),
    ]
  )->toString();

  // Generate mail.
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'password_reset';
  $key = 'user_reset_links';
  $to = $account->getEmail();
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = true;

  $config = \Drupal::config('system.site');
  $siteName = $config->get('name');
  $siteUrl = \Drupal::request()->getSchemeAndHttpHost();

  // Set the message and the subject.
  $params['message'] = \Drupal\Core\Mail\MailFormatHelper::htmlToText(
    t('<p>An administrator of @site-name has requested that you reset your password for @site-url.</p><p>Please use the following link to reset your password:<br>@link</p>',
      ['@site-name' => $siteName, '@site-url' => $siteUrl, '@link' => $link]
    )
  );
  $params['title'] = "Passwort reset - one time login link";

  // Send mail and collect the result.
  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
  if ($result['result'] != true) {
    $message = t('There was a problem sending your email notification to @email.', array('@email' => $to));
    \Drupal::messenger()->addError($message);
    \Drupal::logger('mail-log')->error($message);
    return;
  }

  $message = t('An email notification has been sent to @email ', array('@email' => $to));
  \Drupal::messenger()->addStatus($message);
  \Drupal::logger('mail-log')->notice($message);
}

/**
 * Implements hook_mail().
 */
function password_reset_mail($key, &$message, $params)
{
  $options = array(
    'langcode' => $message['langcode'],
  );

  switch ($key) {
    case 'user_reset_links':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('@title', array('@title' => $params['title']), $options);
      $message['body'][] = Html::escape($params['message']);
      break;
  }
}
